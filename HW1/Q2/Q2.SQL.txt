-- Setup. DO NOT REMOVE.
.headers on
.separator ','

DROP TABLE IF EXISTS sets;
DROP TABLE IF EXISTS themes;
DROP TABLE IF EXISTS parts;
DROP VIEW IF EXISTS top_level_themes;
DROP VIEW IF EXISTS sets_years;
DROP TABLE IF EXISTS parts_fts;


-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.i) Create tables

-- [insert your SQL statement(s) BELOW this line]

CREATE TABLE sets(set_num integer, name text, year integer, theme_id integer, num_parts integer);
CREATE TABLE themes(id integer, name text, parent_id integer);
CREATE TABLE parts(part_num text, name text, part_cat_id integer, part_material_id integer);

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.tables
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (a.ii) Import data

-- [insert your SQLite command(s) BELOW this line]

.import data/sets.csv sets
.import data/themes.csv themes
.import data/parts.csv parts

-- [insert your SQLite command(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='parts';
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='themes';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (b) Create indexes

-- [insert your SQL statement(s) BELOW this line]

CREATE INDEX sets_index ON sets(set_num);
CREATE INDEX parts_index ON parts(part_num);
CREATE INDEX themes_index ON themes(id);



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.indexes
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.i) Create the top_level themes VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW top_level_themes AS SELECT id, name FROM themes WHERE parent_id = '';



-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(top_level_themes);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (c.ii) count the top level themes in the top_level_themes view.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(name) AS count FROM top_level_themes;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (d) Finding top level themes with the most sets.

-- [insert your SQL statement(s) BELOW this line]
SELECT* FROM
    (SELECT name,count(*) as num_sets FROM
        (SELECT * FROM
           (SELECT top_level_themes.name,set_num,theme_id FROM 
                top_level_themes JOIN sets ON top_level_themes.id = sets.theme_id
            )  
        )  
        GROUP BY name
        ORDER BY num_sets DESC
        LIMIT 10)
    WHERE num_sets>25;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (e) Calculate a percentage

-- [insert your SQL statement(s) BELOW this line]

WITH initial_table AS (
    SELECT 1 AS Column_B,
           name,
           num_sets
      FROM (
               SELECT name,
                      count( * ) AS num_sets
                 FROM (
                          SELECT *
                            FROM (
                                     SELECT top_level_themes.name,
                                            set_num,
                                            theme_id
                                       FROM top_level_themes
                                            JOIN
                                            sets ON top_level_themes.id = sets.theme_id
                                 )
                      )
                GROUP BY name
                ORDER BY num_sets DESC
           )
),
final_table AS (
    SELECT 1 AS Column_A,
           Sum(num_sets) AS Total_SUM
      FROM initial_table
),
solution_table AS (
    SELECT initial_table.name,
           initial_table.num_sets,
           final_table.Total_SUM
      FROM initial_table
           LEFT JOIN
           final_table ON initial_table.Column_B = final_table.Column_A
)
SELECT *
  FROM (
           SELECT name,
                  Round( (num_sets * 1.0 / Total_SUM) * 100, 2) AS Percentage
             FROM solution_table
            ORDER BY Percentage DESC
       )
 WHERE Percentage >= 5.0;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (f) Summarize a sub-theme

-- [insert your SQL statement(s) BELOW this line]

WITH table_sub AS (
    SELECT name,
           id
      FROM themes
     WHERE parent_id != ''
),
table_sets AS (
    SELECT name AS set_name,
           theme_id
      FROM sets
)
SELECT *
  FROM (
           SELECT sub_theme,
                  count( * ) AS num_sets
             FROM (
                      SELECT table_sub.name AS sub_theme,
                             table_sets.theme_id
                        FROM table_sets
                             INNER JOIN
                             table_sub ON table_sets.theme_id = table_sub.id
                       ORDER BY theme_id
                  )
            GROUP BY theme_id
            ORDER BY num_sets DESC,
                     sub_theme ASC
       )
 WHERE num_sets > 5;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.i.) Create the sets VIEW

-- [insert your SQL statement(s) BELOW this line]

CREATE VIEW sets_years AS
    SELECT ROWID,
           year,
           COUNT(set_num) AS sets_count
      FROM sets
     GROUP BY year;


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(sets_years);
SELECT count(*) FROM sqlite_master WHERE type='table' AND name='sets_years';
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (g.ii) Find the running total of sets in the Rebrickable database each year

-- [insert your SQL statement(s) BELOW this line]

SELECT * FROM(
    SELECT year,SUM(sets_count) OVER(
    ORDER BY year) as running_total FROM sets_years)
    WHERE year>=1980 AND year<=1989;

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h) Create the FTS table and import data.

-- [insert your SQL statement(s) BELOW this line]

CREATE VIRTUAL TABLE parts_fts
    USING fts3(part_num text, name text, part_cat_id integer, part_material_id integer);
.import data/parts.csv parts_fts

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]

.headers off
PRAGMA table_info(parts_fts);
.headers on
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.i) Count the number of unique parts whose name field begins with the prefix ‘mini’.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(name) AS count_overview FROM
    (SELECT DISTINCT * FROM parts_fts WHERE name LIKE 'mini%');

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.ii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘boy’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS total_boy_minidoll FROM
    (SELECT DISTINCT * FROM parts_fts WHERE name MATCH 'minidoll NEAR/5 boy');

-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --

-- (h.iii) List the part_num’s of the unique parts that contain the terms ‘minidoll’ and ‘girl’ in the name field with no more than 5 intervening terms.

-- [insert your SQL statement(s) BELOW this line]

SELECT COUNT(*) AS total_boy_minidoll FROM
    (SELECT DISTINCT * FROM parts_fts WHERE name MATCH 'minidoll NEAR/5 girl');


-- [insert your SQL statement(s) ABOVE this line]

-- [the following statement(s) are for autograding. DO NOT REMOVE.]
.print '~~~~~'

-- ***** ***** ***** ***** ***** ***** ***** ***** ***** ***** --